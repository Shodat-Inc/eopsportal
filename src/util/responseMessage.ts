const message: any = {
  success: {
    loginSuccess: "User login Successfully.",
    userCreated: "User created successfully.",
    phoneRecordSaved: "Phone Record Saved SuccessFully.",
    addressSaved: "Address Saved SuccessFully.",
    companyRecordSaved: "Company Record Saved SuccessFully.",
    classCreated: "Class created successfully.",
    userUpdated: "User Updated SuccessFully.",
    deleteUser: "User deleted successfully.",
    objectCreated: "Object created successfully.",
    classTagCreated: "Class Tag created successfully.",
    objectValueSaved: "Object Values Saved Successfully.",
    postPublished: "Post published successfully.",
    assetAdded: "Asset added successfully.",
    classAdded: "Class added successfully",
    fetchClass: "Class Fetched Successfully",
    fetchSubClass: "Sub Class Fetched Successfully",
    fetchClassTag: "Class Tag id fetch Successfully",
    deleteClass: "Class Deleted Successfully",
    classTag: "Class Tag added successfully",
    companyRecordAdded: "Company Record added successfully",
    salesTeamContact: "Sales Team will contact you soon",
    deleteRecordAdded: "Deleted Record added Successfully",
    tokenSent: "Token Sent",
    passwordUpdated: "Password updated Successfully",
    objectAdded: "Object added Successfully",
    objectDeleted: "Object Deleted Successfully",
    resendOtp: "Email Already Exist, Resend OTP",
    otpSent: "OTP sent SuccessFully",
    otpVerified: "OTP Verified Successfully",
    phoneRecordAdded: "Phone Record added Successfully",
    reasonAdded: "Reason added Successfully",
    roleAdded: "Role added Successfully",
    tagDatatypeAdded: "Tag DataType added Successfully",
    valueAdded: "Value added Successfully",
    valuesAdded: "Values added Successfully",
    updated: "Updated successfully",
    deleteRole: "Role deleted successfully",
    roleUpdated: "Role Updated Successfully",
    enterpriseUserCreated: "Enterprise User Created Successfully",
    enterpriseUserUpdated: "Enterprise User Updated Successfully",
    enterpriseUserDeleted: "Enterprise User Deleted Successfully",
    responseSaved: "Response Saved Successfully",
    responseFetched: "Response Fetched Successfully",
    enterpriseCreated: "Enterprise Created Successfully",
    dataFetchedById: "Data fetched By Id",
    enterpriseDataDeleted: "Enterprise Data deleted Successfully",
    enterpriseAddress: "Enterprise Address Added Successfully",
    classData: "Class Data",
    enterpriseClassDataFetched: "Enterprise Class Data fetched Successfully",
    dataFetched: "Data Fetched Successfully",
    modelNameBasedOnSubscription: "Fetched Model Name based on User's Subscription",
    tagDataTypeFetched: "Tag Data Type Fetched Successfully",
    userFetched: "Users Fetched Successfully",
    tagDeleted: "Tag Deleted Successfully",
    enterpriseUserFetched: "Enterprise User fetched Successfully",
    profileUpdated: "Profile Updated Successfully",
    emailSent: "Email sent successfully",
    emailSentAdmin: "Email sent Successfully to Enterprise Admin",
    invitationCanceled: "Invitation Canceled Successfully"
  },
  error: {
    error: "error",
    userNotFound: "User Not Found.",
    alreadyExist: "User Already Exist.",
    cantCreateUser: "Cannot Create User.",
    roleError1: "Role does not exist.",
    roleError2: "Role is not active.",
    incorrectPassword: "Password is incorrect.",
    authenticationError: "Can't Authenticate User.",
    serverError: "An error occurred on the server.",
    postMethodError: "Only Post Method Allowed.",
    idError: "Id isn't in the database",
    idReq: "User ID is required.",
    updatedDataError: "Update Data is Required.",
    updateError: "Can't Update User.",
    deleteIdError: "User ID is required for deletion.",
    deleteError: "Can't Delete User.",
    classExist: "Class already exist",
    classData: "No Class Data found",
    noDataFound: "No Data Found.",
    errorDeleteClass: "Error in  Deleting Class",
    classIdError: "ClassId is not provided",
    errorClassTag: "Error in class Tag repo",
    errorBulkClassTag: "Error in bulk class Tag repo",
    fetchClassTag: "Can't fetch Class Tag",
    userNotExist: "User doesn't exist",
    salesTeamContact: "Please Wait Sales Team will contact Soon.",
    deleteDataExist: "Deleted Data already exist",
    incorrectMail: "Incorrect Email",
    invalidToken: "Invalid token",
    noClassID: "No Class ID",
    noID: "No ID",
    errorDeleteObject: "Error in deleting Object",
    errorService: "Error in Service",
    invalidOtp: "Invalid OTP",
    classIdNotProvided: "ClassId Is not provided",
    objectIdError: "Object ID not provided",
    objectValueNotExist: "Object Value Doesn't Exists",
    errorUpdation: "Error in Updating data",
    errorDeleteRole: "Error in deleting Role",
    roleNotFound: "Role with this id is not found",
    roleExist: "Role name already exist",
    enterpriseUserExist: "Enterprise User Already Exists",
    errorCreateEnterpriseUser: "Error In Creating Enterprise",
    errorUpdationMessage: "Error in Updating Enterprise User",
    errorUpdatingEnterpriseData: "Error in updating Enterprise Data",
    errorDeletionEnterpriseUser: "Error in deleting Enterprise User",
    errorFetchingEnterpriseData: "Error in fetching Enterprise Data",
    modelObjectImageId: "ModelObjectImage Id not found",
    responseAlreadySaved: "Response is already Saved",
    errorCrackDetectionRepo: "Error in Crack Detection Repo",
    modelObjectImageIdInParams: "ModelObjectImage ID is not provided in params",
    responseDataNotExist: "Response data doesn't exist with provided id",
    errorFetchingResponse: "Error in fetching Response",
    dataNotExist: "Data doesn't Exist",
    idNotProvided: "Id is not provided",
    errorDeletingData: "Error in deleting data",
    errorSavingEnterpriseAddress: "Error In Saving Enterprise Address",
    errorGettingEnterpriseDataById: "Error in getting Enterprise Data by Id",
    errorFetchingClassData: "Error in fetching Class Data",
    enterpriseUserNotExist: "Enterprise User doesn't Exist",
    purchaseHistoryDataNotExist: "Purchase History Data doesn't Exist",
    errorFetchingRoles: "Error in fetching roles",
    rolesNotExist: "Roles doesn't Exists",
    modelDataNotExist: "Model's Data doesn't Exist",
    errorModelNameBasedOnSubscription: "Error in getting Model Name based on User's Subscription",
    unableFetchTagDataType: "Can't Fetch Tag DataTypes",
    errorFetchingUser: "Error in fetching users",
    errorFetchingUserById: "Error in fetching user by ID",
    errorDeletingObjectValues: "Error in deleting object values",
    errorFetchingEnterpriseUser: "Error in fetching Enterprise User",
    errorUpdatingData: "Error in Updating data",
    enterpriseAdminAccess: "Heyy, Only Enterprise Admins have access to send invitations",
    apologiesEnterpriseAdminAccess: "Apologies, Only Enterprise Admin have access to send Invitation",
    errorInvitingUser: "Error in inviting Enterprise User",
    userNotFoundForMail: "User not found for the given email",
    errorCancelInvite: "Error in cancel Invite of Enterprise User"
  },
};

export default message;
